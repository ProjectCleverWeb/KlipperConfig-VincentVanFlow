[gcode_macro MOVE]
description:
	A slightly safer version of the G1 command, that should help avoid scraping
	the bed and potentially avoid hitting any prints on the bed. No print
	detection, just more logical manual movement at the cost of a little more
	time. Extruding also works differently if not moving in either X or Y, instead
	opting for moving to Z then extruding at E_SPEED.
gcode:
	; Start Macro
	{% set SELF = 'MOVE' %}
	_MACRO_START LOG=0 NAME="{SELF}" RAW_PARAMS={rawparams|e}
	
	; Config defaults
	{% set X          = false %}
	{% set Y          = false %}
	{% set Z          = false %}
	{% set E          = false %}
	{% set Z_BUFFER   = 5 %}
	{% set XY_SPEED   = 50 %}
	{% set Z_SPEED    = 20 %}
	{% set E_SPEED    = 3 %}
	{% set SAFE_X_MIN = 0 %}
	{% set SAFE_X_MAX = printer.toolhead.axis_maximum.x %}
	{% set SAFE_Y_MIN = 0 %}
	{% set SAFE_Y_MAX = printer.toolhead.axis_maximum.y %}
	{% set SAFE_Z_MIN = 0 %}
	{% set SAFE_Z_MAX = printer.toolhead.axis_maximum.z %}
	
	; Import vars
	{% if 'save_variables' in printer %}
		{% set vars = printer.save_variables.variables %}
		{% if 'z_buffer' in vars %}
			{% set Z_BUFFER = vars.z_buffer %}
		{% endif %}
		{% if 'xy_speed' in vars %}
			{% set XY_SPEED = vars.xy_speed %}
		{% endif %}
		{% if 'z_speed' in vars %}
			{% set Z_SPEED = vars.z_speed %}
		{% endif %}
		{% if 'e_speed' in vars %}
			{% set E_SPEED = vars.e_speed %}
		{% endif %}
		{% if 'safe_x_min' in vars %}
			{% set SAFE_X_MIN = vars.safe_x_min %}
		{% endif %}
		{% if 'safe_x_max' in vars %}
			{% set SAFE_X_MAX = vars.safe_x_max %}
		{% endif %}
		{% if 'safe_y_min' in vars %}
			{% set SAFE_Y_MIN = vars.safe_y_min %}
		{% endif %}
		{% if 'safe_y_max' in vars %}
			{% set SAFE_Y_MAX = vars.safe_y_max %}
		{% endif %}
		{% if 'safe_z_min' in vars %}
			{% set SAFE_Z_MIN = vars.safe_z_min %}
		{% endif %}
		
	{% endif %}
	
	; Params
	{% set X        = params.X|default(X) %}
	{% set Y        = params.Y|default(Y) %}
	{% set Z        = params.Z|default(Z) %}
	{% set E        = params.E|default(E) %}
	{% set XY       = params.XY|default(false) %}
	{% set XZ       = params.XZ|default(false) %}
	{% set YZ       = params.YZ|default(false) %}
	{% set XYZ      = params.XYZ|default(false) %}
	{% set XY_SPEED = params.XY_SPEED|default(XY_SPEED)|int %}
	{% set Z_SPEED  = params.Z_SPEED|default(Z_SPEED)|int %}
	{% set E_SPEED  = params.E_SPEED|default(E_SPEED)|int %}
	{% set LOG      = params.LOG|default(1)|int > 0 %}
	
	; Run macro
	; We need to non-fatal error so we don't accidentally cancel/pause the print
	_ASSERT_PRINTING INVERT=1 TYPE=ERROR
	
	; Allow setting multiple axes to the same coordinates
	{% if X is false %}
		{% if XYZ is not false %}
			{% set X = XYZ %}
		{% elif XZ is not false %}
			{% set X = XZ %}
		{% elif XY is not false %}
			{% set X = XY %}
		{% endif %}
	{% endif %}
	{% if Y is false %}
		{% if XYZ is not false %}
			{% set Y = XYZ %}
		{% elif YZ is not false %}
			{% set Y = YZ %}
		{% elif XY is not false %}
			{% set Y = XY %}
		{% endif %}
	{% endif %}
	{% if Z is false %}
		{% if XYZ is not false %}
			{% set Z = XYZ %}
		{% elif YZ is not false %}
			{% set Z = YZ %}
		{% elif XZ is not false %}
			{% set Z = XZ %}
		{% endif %}
	{% endif %}
	
	{% set IS_COORDINATES_NOT_SET = (X is false and Y is false and Z is false and E is false) %}
	{% set IS_PRINTING = printer["gcode_macro _ASSERT_PRINTING"].is_printing %}
	
	{% if not IS_PRINTING and not IS_COORDINATES_NOT_SET %}
		HOME
		
		{% set XY_FSPEED  = XY_SPEED * 60 %}
		{% set Z_FSPEED   = Z_SPEED * 60 %}
		{% set E_FSPEED   = E_SPEED * 60 %}
		; Get current XYZ here in case homing moved it
		{% set CURRENT_X  = printer.toolhead.position.x %}
		{% set CURRENT_Y  = printer.toolhead.position.y %}
		{% set CURRENT_Z  = printer.toolhead.position.z %}
		
		{% set X_UPDATED = true %}
		{% set Y_UPDATED = true %}
		{% set Z_UPDATED = true %}
		{% if X is false %}
			{% set X = CURRENT_X %}
			{% set X_UPDATED = false %}
		{% endif %}
		{% if Y is false %}
			{% set Y = CURRENT_Y %}
			{% set Y_UPDATED = false %}
		{% endif %}
		{% if Z is false %}
			{% set Z = CURRENT_Z %}
			{% set Z_UPDATED = false %}
		{% endif %}
		{% set XY_UPDATED = (X_UPDATED or Y_UPDATED) %}
		
		; Sanitize
		{% set X     = [[X|float, SAFE_X_MAX]|min, SAFE_X_MIN]|max %}
		{% set Y     = [[Y|float, SAFE_Y_MAX]|min, SAFE_Y_MIN]|max %}
		{% set Z     = [[Z|float, SAFE_Z_MAX]|min, SAFE_Z_MIN]|max %}
		{% set Z_HOP = [[CURRENT_Z + Z_BUFFER, SAFE_Z_MAX]|min, SAFE_Z_MIN]|max %}
		
		{% if LOG %}
			LOG TYPE=STATUS MSG="Moving to X{X} Y{Y} Z{Z} E{E|float}"
		{% endif %}
		
		G90 ; Absolute positioning
		
		{% if XY_UPDATED %}
			; Z Hop as needed
			{% if Z <= CURRENT_Z %}
				G1 Z{Z_HOP} F{Z_FSPEED}
			{% else %}
				G1 Z{[Z, Z_HOP]|max} F{Z_FSPEED}
			{% endif %}
			
			; Move in X, Y, & E
			{% if E is false %}
				G1 X{X} Y{Y} F{XY_FSPEED}
			{% else %}
				G1 X{X} Y{Y} E{E} F{XY_FSPEED}
			{% endif %}
		{% endif %}
		
		; Move to final Z
		G1 Z{Z} F{Z_FSPEED}
		
		; If not moving in X/Y then extrude after Z move, but not during
		{% if not XY_UPDATED and E is not false %}
			LOG MSG="Moving E at {E_FSPEED}"
			G1 E{E} F{E_FSPEED}
		{% endif %}
		
	{% elif IS_COORDINATES_NOT_SET %}
		LOG TYPE=ERROR MSG="MOVE cannot be used without setting at least one of X, Y, Z, or E"
	{% endif %}
	
	; End Macro
	_MACRO_END LOG=0 NAME="{SELF}"
